{"version":3,"sources":["components/UI/Card.js","components/Expenses/ExpenseFilter.js","components/Expenses/ExpenseDate.js","components/Expenses/ExpenseItem.js","components/Expenses/ExpenseList.js","components/Chart/Bar.js","components/Chart/Chart.js","components/Expenses/ExpenseChart.js","components/Expenses/Expense.js","components/NewExpense/ExpenseForm.js","components/NewExpense/NewExpense.js","App.js","reportWebVitals.js","index.js"],"names":["Card","props","classes","className","children","ExpenseFilter","value","selected","onChange","event","onChangeFilter","target","ExpenseDate","month","date","toLocaleString","day","year","getFullYear","ExpenseItem","title","price","ExpenseList","items","length","map","expenses","amount","id","Bar","barFillHeight","maxValue","Math","round","style","height","lable","Chart","dataPointValues","dataPoints","dataPoint","totalMaximum","max","ExpenseChart","chartDataPoints","expense","getMonth","Expense","useState","filteredYear","setFilteredYear","filteredExpenses","filter","toString","selectedYear","ExpenseForm","enteredTitle","setEnteredTitle","enteredAmount","setEnteredAmount","enteredDate","setEnteredDate","onSubmit","preventDefault","expenseData","Date","onSaveExpenseData","type","min","step","NewExpense","enteredExpenseData","random","onAddExpense","DUMMY_EXPENSES","App","setExpenses","newExpense","prevExpenses","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fb74107b.chunk.js","sourcesContent":["import \"./Card.css\";\r\n\r\nconst Card = (props) => {\r\n  const classes = \"card \" + props.className;\r\n  return <div className={classes}>{props.children}</div>;\r\n};\r\n\r\nexport default Card;\r\n","import \"./ExpenseFilter.css\";\r\nconst ExpenseFilter = (props) => {\r\n  const dropdownChangeHandler = (event) => {\r\n    props.onChangeFilter(event.target.value);\r\n  };\r\n  return (\r\n    <div className=\"expenses-filter\">\r\n      <div className=\"expenses-filter__control\">\r\n        <span>Filter by year</span>\r\n        <select value={props.selected} onChange={dropdownChangeHandler}>\r\n          <option value={\"2022\"}>2022</option>\r\n          <option value={\"2021\"}>2021</option>\r\n          <option value={\"2020\"}>2020</option>\r\n          <option value={\"2019\"}>2019</option>\r\n        </select>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ExpenseFilter;\r\n","import \"./ExpenseDate.css\";\r\n\r\nconst ExpenseDate = (props) => {\r\n  const month = props.date.toLocaleString(\"en-US\", { month: \"long\" });\r\n  const day = props.date.toLocaleString(\"en-US\", { day: \"2-digit\" });\r\n  const year = props.date.getFullYear();\r\n\r\n  return (\r\n    <div className=\"expense-date\">\r\n      <div className=\"expense-date__month\">{month}</div>\r\n      <div className=\"expense-date__day\">{day}</div>\r\n      <div className=\"expense-date__year\">{year}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ExpenseDate;\r\n","import \"./ExpenseItem.css\";\r\nimport ExpenseDate from \"./ExpenseDate\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n// import React, { useState } from \"react\";\r\n// import Card from \"./Card\";\r\n\r\nconst ExpenseItem = (props) => {\r\n  // const [title, setTitle] = useState(props.title);\r\n  // const clickHandler = () => {\r\n  //   setTitle(\"Updated!\");\r\n  // };\r\n\r\n  return (\r\n    <div className=\"expense-item\">\r\n      <ExpenseDate date={props.date} />\r\n      <div className=\"expense-item__description\">\r\n        <h2>{props.title}</h2>\r\n        <div className=\"expense-item__price\">${props.price}</div>\r\n      </div>\r\n      {/* <button onClick={clickHandler} type=\"button\">\r\n        Primary\r\n      </button> */}\r\n    </div>\r\n  );\r\n};\r\nexport default ExpenseItem;\r\n","import ExpenseItem from \"./ExpenseItem\";\r\nimport \"./ExpenseList.css\";\r\n\r\nconst ExpenseList = (props) => {\r\n  if (props.items.length === 0) {\r\n    return <h2 className=\"expenses-list__fallback\">No Expenses Found!</h2>;\r\n  }\r\n  return (\r\n    <ul className=\"expenses-list\">\r\n      {props.items.map((expenses) => (\r\n        <ExpenseItem\r\n          key={expenses.id}\r\n          title={expenses.title}\r\n          date={expenses.date}\r\n          price={expenses.amount}\r\n        />\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\nexport default ExpenseList;\r\n","import \"./Bar.css\";\r\n\r\nconst Bar = (props) => {\r\n  let barFillHeight = \"0%\";\r\n  if (props.maxValue > 0) {\r\n    barFillHeight = Math.round((props.value / props.maxValue) * 100) + \"%\";\r\n  }\r\n\r\n  return (\r\n    <div className=\"chart-bar\">\r\n      <div className=\"chart-bar__inner\">\r\n        <div\r\n          className=\"chart-bar__fill\"\r\n          style={{ height: barFillHeight }}\r\n        ></div>\r\n      </div>\r\n      <div className=\"chart-bar__lable\">{props.lable}</div>\r\n    </div>\r\n  );\r\n};\r\nexport default Bar;\r\n","import \"./Chart.css\";\r\nimport Bar from \"./Bar\";\r\n\r\nconst Chart = (props) => {\r\n  const dataPointValues = props.dataPoints.map((dataPoint) => dataPoint.value);\r\n  const totalMaximum = Math.max(...dataPointValues);\r\n\r\n  return (\r\n    <div className=\"chart\">\r\n      {props.dataPoints.map((dataPoint) => {\r\n        return (\r\n          <Bar\r\n            key={dataPoint.id}\r\n            maxValue={totalMaximum}\r\n            lable={dataPoint.lable}\r\n            value={dataPoint.value}\r\n          />\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chart;\r\n","import Chart from \"../Chart/Chart\";\r\n\r\nconst ExpenseChart = (props) => {\r\n  const chartDataPoints = [\r\n    { lable: \"Jan\", value: 0 },\r\n    { lable: \"Feb\", value: 0 },\r\n    { lable: \"Mar\", value: 0 },\r\n    { lable: \"Apr\", value: 0 },\r\n    { lable: \"May\", value: 0 },\r\n    { lable: \"Jun\", value: 0 },\r\n    { lable: \"Jul\", value: 0 },\r\n    { lable: \"Aug\", value: 0 },\r\n    { lable: \"Sep\", value: 0 },\r\n    { lable: \"Oct\", value: 0 },\r\n    { lable: \"Nov\", value: 0 },\r\n    { lable: \"Dec\", value: 0 },\r\n  ];\r\n  for (const expense of props.expenses) {\r\n    const expenseMonth = expense.date.getMonth(); // starting at 0 => January = 0\r\n    chartDataPoints[expenseMonth].value += expense.amount;\r\n  }\r\n  return <Chart dataPoints={chartDataPoints} />;\r\n};\r\n\r\nexport default ExpenseChart;\r\n","import \"./Expense.css\";\r\nimport Card from \"../UI/Card\";\r\nimport React, { useState } from \"react\";\r\nimport ExpenseFilter from \"./ExpenseFilter\";\r\nimport ExpenseList from \"./ExpenseList\";\r\nimport ExpenseChart from \"./ExpenseChart\";\r\n// import Chart from \"../Chart/Chart\";\r\n\r\nconst Expense = (props) => {\r\n  const [filteredYear, setFilteredYear] = useState(\"2021\");\r\n  const filterChangeHandler = (selectedYear) => {\r\n    setFilteredYear(selectedYear);\r\n  };\r\n  //\r\n  const filteredExpenses = props.items.filter((expense) => {\r\n    return expense.date.getFullYear().toString() === filteredYear;\r\n  });\r\n  // It's better to create another component for this part.\r\n  // EITHER \\\\\r\n  // let expenseContent = <p>No Expenses Found!</p>;\r\n  // if (filteredExpenses.length > 0) {\r\n  //   expenseContent = filteredExpenses.map((expenses) => (\r\n  //     <ExpenseItem\r\n  //       key={expenses.id}\r\n  //       title={expenses.title}\r\n  //       date={expenses.date}\r\n  //       price={expenses.amount}\r\n  //     />\r\n  //   ));\r\n  // }\r\n  return (\r\n    <div>\r\n      <Card className=\"expenses\">\r\n        <ExpenseFilter\r\n          selected={filteredYear}\r\n          onChangeFilter={filterChangeHandler}\r\n        />\r\n        <ExpenseChart expenses={filteredExpenses} />\r\n        <ExpenseList items={filteredExpenses} />\r\n\r\n        {/* OR */}\r\n        {/* {filteredExpenses.length === 0 ? (\r\n        <p>No Expenses Found!</p>\r\n      ) : (\r\n        filteredExpenses.map((expenses) => (\r\n          <ExpenseItem\r\n            key={expenses.id}\r\n            title={expenses.title}\r\n            date={expenses.date}\r\n            price={expenses.amount}\r\n          />\r\n        ))\r\n      )} */}\r\n        {/* OR */}\r\n        {/* {filteredExpenses.length === 0 && <p>No Expenses Found!</p>}\r\n      {filteredExpenses.length > 0 &&\r\n        filteredExpenses.map((expenses) => (\r\n          <ExpenseItem\r\n            key={expenses.id}\r\n            title={expenses.title}\r\n            date={expenses.date}\r\n            price={expenses.amount}\r\n          />\r\n        ))} */}\r\n\r\n        {/* <ExpenseItem\r\n        title={props.expenses[0].title}\r\n        date={props.expenses[0].date}\r\n        price={props.expenses[0].amount}\r\n      />\r\n      <ExpenseItem\r\n        title={props.expenses[1].title}\r\n        date={props.expenses[1].date}\r\n        price={props.expenses[1].amount}\r\n      />\r\n      <ExpenseItem\r\n        title={props.expenses[2].title}\r\n        date={props.expenses[2].date}\r\n        price={props.expenses[2].amount}\r\n      />\r\n      <ExpenseItem\r\n        title={props.expenses[3].title}\r\n        date={props.expenses[3].date}\r\n        price={props.expenses[3].amount}\r\n      /> */}\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Expense;\r\n","import \"./ExpenseForm.css\";\r\nimport React, { useState } from \"react\";\r\n\r\nconst ExpenseForm = (props) => {\r\n  const [enteredTitle, setEnteredTitle] = useState(\"\");\r\n  const [enteredAmount, setEnteredAmount] = useState(\"\");\r\n  const [enteredDate, setEnteredDate] = useState(\"\");\r\n  //\r\n  //Instead of using useState three times, we can use one state and adding the values inside an object like the following:\r\n  //   const [userInput, setUserInput] = useState({\r\n  //     enteredTitle: \"\",\r\n  //     enteredAmount: \"\",\r\n  //     enteredDate: \"\",\r\n  //   });\r\n\r\n  const titleChangeHandler = (event) => {\r\n    // First Aproch:\r\n    setEnteredTitle(event.target.value);\r\n    //\r\n    // If we are using \"One State\" instead of three separate states, we need to be careful about the other states in the object, in order to do not omit them. Because when the compiler sees the new state update, it simply replaces the new update with the previous state. It does not merge them together! In order to do so, we need to use \"Spread Operation (...something)\" to make sure we are saving the previous states.\r\n    //\r\n    // Second Approch:\r\n    // setUserInput({ ...userInput, enteredTitle: event.target.value });\r\n    //\r\n    // Although this approch might not work properly in all cases. Because as we know, 'useState' will not be executed immidately but it will be scheduled for doing it. So, it may cause problems in the future. Hence, if the updated state depends on previous state (like now), using the privouse approch may cause errors. It's better to use the following approch in order to don't cross errors:\r\n    //\r\n    // Third Approch:\r\n    // setUserInput = (prevState) => {\r\n    //   return { ...prevState, setEnteredTitle: event.target.value };\r\n    // };\r\n    //\r\n    // Although this function works well either, but here I personally prefer to use the first approch, because it's the current approch to do so. Here, I just wanted to show you, that there are another ways to do this too.\r\n  };\r\n  const amountChangeHandler = (event) => {\r\n    setEnteredAmount(event.target.value);\r\n    // setUserInput({ ...userInput, enteredAmount: event.target.value });\r\n  };\r\n  const dateChangeHandler = (event) => {\r\n    setEnteredDate(event.target.value);\r\n    // setUserInput({ ...userInput, enteredDate: event.target.value });\r\n  };\r\n\r\n  const submitHandler = (event) => {\r\n    event.preventDefault();\r\n    const expenseData = {\r\n      title: enteredTitle,\r\n      amount: enteredAmount,\r\n      date: new Date(enteredDate),\r\n    };\r\n    props.onSaveExpenseData(expenseData);\r\n    setEnteredTitle(\"\");\r\n    setEnteredAmount(\"\");\r\n    setEnteredDate(\"\");\r\n  };\r\n  //\r\n  return (\r\n    <form onSubmit={submitHandler}>\r\n      <div className=\"new-expense__controls\">\r\n        <div className=\"new-expense__control\">\r\n          <span>Title</span>\r\n          <input\r\n            type=\"text\"\r\n            value={enteredTitle}\r\n            onChange={titleChangeHandler}\r\n          />\r\n        </div>\r\n        <div className=\"new-expense__control\">\r\n          <span>Amount</span>\r\n          <input\r\n            type=\"number\"\r\n            min=\"0.01\"\r\n            step=\"0.01\"\r\n            value={enteredAmount}\r\n            onChange={amountChangeHandler}\r\n          />\r\n        </div>\r\n        <div className=\"new-expense__control\">\r\n          <span>Date</span>\r\n          <input\r\n            type=\"date\"\r\n            min=\"2019-01-01\"\r\n            max=\"2022-12-31\"\r\n            value={enteredDate}\r\n            onChange={dateChangeHandler}\r\n          />\r\n        </div>\r\n        <div className=\"new-expense__actions\">\r\n          <button type=\"submit\">Add Expense</button>\r\n        </div>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default ExpenseForm;\r\n","import \"./NewExpense.css\";\r\nimport ExpenseForm from \"./ExpenseForm\";\r\n\r\nconst NewExpense = (props) => {\r\n  const saveExpenseDataHandler = (enteredExpenseData) => {\r\n    const expenseData = {\r\n      ...enteredExpenseData,\r\n      id: Math.random().toString(),\r\n    };\r\n    props.onAddExpense(expenseData);\r\n  };\r\n  return (\r\n    <div className=\"new-expense\">\r\n      <ExpenseForm onSaveExpenseData={saveExpenseDataHandler} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NewExpense;\r\n","import \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Expense from \"./components/Expenses/Expense\";\nimport NewExpense from \"./components/NewExpense/NewExpense\";\nimport React, { useState } from \"react\";\n\nconst DUMMY_EXPENSES = [\n  {\n    id: \"e1\",\n    title: \"Toilet Paper\",\n    amount: 94.12,\n    date: new Date(2020, 7, 14),\n  },\n  {\n    id: \"e2\",\n    title: \"New TV\",\n    amount: 799.49,\n    date: new Date(2021, 2, 12),\n  },\n  {\n    id: \"e3\",\n    title: \"Car Insurance\",\n    amount: 294.67,\n    date: new Date(2021, 2, 28),\n  },\n  {\n    id: \"e4\",\n    title: \"New Desk (Wooden)\",\n    amount: 450,\n    date: new Date(2021, 5, 12),\n  },\n];\n\nconst App = () => {\n  const [expenses, setExpenses] = useState(DUMMY_EXPENSES);\n  const addExpenseHandler = (newExpense) => {\n    setExpenses((prevExpenses) => {\n      return [newExpense, ...prevExpenses];\n    });\n  };\n\n  return (\n    <div>\n      <NewExpense onAddExpense={addExpenseHandler} />\n      <Expense items={expenses} />\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n// ReactDOM.render(<ExpenseItem />, document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}